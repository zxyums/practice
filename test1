import React from 'react';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

// Define parent and child dropdown options explicitly
const parentDropdownOptions = ['Parent Option 1', 'Parent Option 2', 'Parent Option 3'];
const childOptionsMap: Record<string, string[]> = {
  'Parent Option 1': ['Child 1.1', 'Child 1.2', 'Child 1.3'],
  'Parent Option 2': ['Child 2.1', 'Child 2.2', 'Child 2.3'],
  'Parent Option 3': ['Child 3.1', 'Child 3.2', 'Child 3.3'],
};

// Define normal dropdown options for Column 3 and Column 4
const normalDropdownOptionsColumn3 = ['Option A', 'Option B', 'Option C'];
const normalDropdownOptionsColumn4 = ['Choice 1', 'Choice 2', 'Choice 3'];

const ExcelExport: React.FC = () => {
  const handleDownloadExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    
    // Create MainSheet and HiddenSheet
    const mainSheet = workbook.addWorksheet('MainSheet');
    const hiddenSheet = workbook.addWorksheet('HiddenSheet');

    // Add headers to MainSheet (Parent-Child, Normal dropdowns)
    mainSheet.columns = [
      { header: 'Column 1 (Parent)', key: 'parent', width: 30 },
      { header: 'Column 2 (Cascading)', key: 'child', width: 30 },
      { header: 'Column 3 (Normal Dropdown)', key: 'normal3', width: 30 },
      { header: 'Column 4 (Normal Dropdown)', key: 'normal4', width: 30 },
    ];

    // Add parent dropdown options to HiddenSheet (in Column A)
    parentDropdownOptions.forEach((option, idx) => {
      hiddenSheet.getCell(`A${idx + 1}`).value = option;
    });

    // Add child dropdown options explicitly for each parent in HiddenSheet (in Columns B-D)
    parentDropdownOptions.forEach((parentOption, idx) => {
      const children = childOptionsMap[parentOption];
      children.forEach((childOption, childIdx) => {
        hiddenSheet.getCell(`${String.fromCharCode(66 + idx)}${childIdx + 1}`).value = childOption;
      });
    });

    // Apply dropdowns to MainSheet for 1000 rows
    for (let i = 2; i <= 1000; i++) {
      const parentCell = mainSheet.getCell(`A${i}`);
      const childCell = mainSheet.getCell(`B${i}`);
      const normalCell3 = mainSheet.getCell(`C${i}`);
      const normalCell4 = mainSheet.getCell(`D${i}`);

      // Add parent dropdown from HiddenSheet
      parentCell.dataValidation = {
        type: 'list',
        allowBlank: false,
        formula1: `'HiddenSheet'!$A$1:$A$${parentDropdownOptions.length}`,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Parent dropdown.',
      };

      // Apply static cascading dropdown logic for each parent-child relationship
      // IF statements for each parent to load the correct children in each row
      if (parentCell.value === 'Parent Option 1') {
        childCell.dataValidation = {
          type: 'list',
          allowBlank: false,
          formula1: `'HiddenSheet'!$B$1:$B$3`,
          showErrorMessage: true,
          errorTitle: 'Invalid Input',
          error: 'Please select a valid option from the Child dropdown.',
        };
      } else if (parentCell.value === 'Parent Option 2') {
        childCell.dataValidation = {
          type: 'list',
          allowBlank: false,
          formula1: `'HiddenSheet'!$C$1:$C$3`,
          showErrorMessage: true,
          errorTitle: 'Invalid Input',
          error: 'Please select a valid option from the Child dropdown.',
        };
      } else if (parentCell.value === 'Parent Option 3') {
        childCell.dataValidation = {
          type: 'list',
          allowBlank: false,
          formula1: `'HiddenSheet'!$D$1:$D$3`,
          showErrorMessage: true,
          errorTitle: 'Invalid Input',
          error: 'Please select a valid option from the Child dropdown.',
        };
      }

      // Add normal dropdown to Column 3
      normalCell3.dataValidation = {
        type: 'list',
        allowBlank: false,
        formula1: `"${normalDropdownOptionsColumn3.join(',')}"`,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Column 3 dropdown.',
      };

      // Add normal dropdown to Column 4
      normalCell4.dataValidation = {
        type: 'list',
        allowBlank: false,
        formula1: `"${normalDropdownOptionsColumn4.join(',')}"`,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Column 4 dropdown.',
      };
    }

    // Hide the HiddenSheet
    hiddenSheet.state = 'hidden';

    // Save the workbook
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'final_cascading_dropdown_fixed.xlsx');
  };

  return (
    <div>
      <button onClick={handleDownloadExcel}>Download Final Fixed Excel</button>
    </div>
  );
};

export default ExcelExport;