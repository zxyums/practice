import React from 'react';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
// Import the Excel file directly
import yourExcelFile from './your-file.xlsx'; // Adjust the path if necessary

// Utility function to read the file as an ArrayBuffer using FileReader with async/await
const readFileAsArrayBuffer = (file: Blob): Promise<ArrayBuffer> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (event) => {
      if (event.target?.result) {
        resolve(event.target.result as ArrayBuffer);
      } else {
        reject(new Error("File reading failed."));
      }
    };
    reader.onerror = () => reject(new Error("FileReader encountered an error."));
    reader.readAsArrayBuffer(file);
  });
};

const ExcelProcessor: React.FC = () => {
  const handleFileProcess = async () => {
    try {
      // Step 1: Fetch the imported file as Blob
      const response = await fetch(yourExcelFile); // Vite will serve this file as an asset
      if (!response.ok) {
        throw new Error(`Error fetching the file: ${response.statusText}`);
      }
      const blob = await response.blob();

      // Step 2: Read the file as ArrayBuffer using FileReader
      const arrayBuffer = await readFileAsArrayBuffer(blob);

      // Step 3: Read the workbook (all sheets)
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });

      // Step 4: Get all sheet names
      const sheetNames = workbook.SheetNames;

      // Step 5: Modify only the target sheet (for example, the first sheet)
      const targetSheetName = sheetNames[0]; // Replace with the sheet name you want to modify
      const worksheet = workbook.Sheets[targetSheetName];

      // Convert the sheet data to a 2D array (rows and columns)
      const sheetData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      // Modify the data (for example, add a new row)
      const newRow = ['New Data 1', 'New Data 2', 'New Data 3'];
      sheetData.push(newRow);

      // Convert the modified data back to the worksheet
      const newWorksheet = XLSX.utils.aoa_to_sheet(sheetData);

      // Replace the modified sheet in the workbook
      workbook.Sheets[targetSheetName] = newWorksheet;

      // Step 6: Write the modified workbook to an ArrayBuffer (keeping other sheets intact)
      const newWorkbookArrayBuffer = XLSX.write(workbook, {
        bookType: 'xlsx',
        type: 'array', // Ensures it's returned as ArrayBuffer
      });

      // Step 7: Create a Blob from the ArrayBuffer
      const newExcelBlob = new Blob([newWorkbookArrayBuffer], {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      });

      // Step 8: Trigger file download using FileSaver
      saveAs(newExcelBlob, 'modified-file.xlsx');
    } catch (error) {
      console.error('Error processing file:', error);
    }
  };

  return (
    <div>
      <button onClick={handleFileProcess}>Process and Download Excel File</button>
    </div>
  );
};
export default ExcelProcessor;