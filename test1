import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

const MyForm = ({ userRole }) => {
  const { register, getValues } = useForm();

  // Define sections with fields
  const sections = [
    {
      name: "Section 1",
      fields: [
        { name: "field1", type: "input", placeholder: "Field 1", condition: () => true },
        { name: "dropdown1", type: "dropdown", options: ["optionA", "optionB", "optionC"], condition: () => true },
      ],
    },
    {
      name: "Conditional Section",
      condition: () => userRole === "admin", // Visible only for admin role
      fields: [
        { name: "adminField1", type: "input", placeholder: "Admin Field 1", condition: () => true },
        { name: "adminField2", type: "input", placeholder: "Admin Field 2", condition: () => true },
      ],
    },
    {
      name: "Section 3",
      fields: [
        { name: "field3", type: "input", placeholder: "Field 3", condition: () => true },
        { name: "dropdown2", type: "dropdown", options: ["optionX", "optionY"], condition: (values) => values.dropdown1 === "optionA" },
      ],
    },
  ];

  // State for progress and section statuses
  const [progress, setProgress] = useState(0);
  const [sectionStatuses, setSectionStatuses] = useState(
    sections.map(() => false)
  );

  // Function to calculate progress dynamically
  const calculateProgress = () => {
    const values = getValues();
    const activeFields = sections
      .filter((section) => !section.condition || section.condition()) // Only active sections
      .flatMap((section) =>
        section.fields.filter((field) => field.condition(values))
      );
    const filledFields = activeFields.filter((field) => values[field.name]?.trim()).length;

    return activeFields.length ? Math.round((filledFields / activeFields.length) * 100) : 100;
  };

  // Function to update section completion statuses
  const updateSectionStatuses = () => {
    const values = getValues();
    return sections.map((section) => {
      if (section.condition && !section.condition()) return false; // Skip inactive sections
      const activeFields = section.fields.filter((field) => field.condition(values));
      const filledFields = activeFields.filter((field) => values[field.name]?.trim()).length;
      return activeFields.length > 0 && filledFields === activeFields.length;
    });
  };

  // Monitor all fields for changes
  useEffect(() => {
    const allFieldNames = sections.flatMap((section) =>
      section.fields.map((field) => field.name)
    );

    // Check if any monitored field changed
    const values = getValues();
    const hasChanges = allFieldNames.some((field) => values[field] !== undefined);

    if (hasChanges) {
      setProgress(calculateProgress());
      setSectionStatuses(updateSectionStatuses());
    }
  }, [getValues]);

  return (
    <form>
      {sections.map((section, index) =>
        (!section.condition || section.condition()) ? ( // Render section only if its condition is met
          <div key={index} style={{ marginBottom: "20px", border: "1px solid #ccc", padding: "10px" }}>
            <h3>{section.name}</h3>
            {section.fields.map((field) =>
              field.condition(getValues()) ? (
                field.type === "dropdown" ? (
                  <select key={field.name} {...register(field.name)} defaultValue="">
                    <option value="">Select {field.name}</option>
                    {field.options.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    key={field.name}
                    {...register(field.name)}
                    placeholder={field.placeholder}
                  />
                )
              ) : null
            )}
            <p>Status: {sectionStatuses[index] ? "Complete" : "Incomplete"}</p>
          </div>
        ) : null
      )}
      <div style={{ marginTop: "20px" }}>
        <h4>Overall Progress: {progress}%</h4>
      </div>
    </form>
  );
};

export default MyForm;