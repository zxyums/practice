import React from 'react';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver'; // Import FileSaver.js

const ExcelProcessor = () => {
  const handleFileRead = () => {
    fetch('/3Q2024_Template_Without_Macros.xlsx') // Update with correct path if using public folder
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to load the Excel file');
        }
        return response.arrayBuffer();
      })
      .then(async (data) => {
        const workbook = new ExcelJS.Workbook();
        try {
          await workbook.xlsx.load(data); // Load the Excel data

          // Log sheet names for debugging
          console.log('Sheet Names:', workbook.worksheets.map(sheet => sheet.name));

          // Check if the first worksheet exists
          const worksheet = workbook.getWorksheet(1);
          if (!worksheet) {
            throw new Error('Worksheet not found!');
          }

          // Write new data starting from row 3 (below headers)
          writeDataToWorksheet(worksheet, 3);

          // Write the modified workbook to a blob and trigger download
          writeExcelFile(workbook);
        } catch (error) {
          console.error('Error processing the Excel file:', error);
        }
      })
      .catch((error) => {
        console.error('Error loading the file:', error);
      });
  };

  const writeDataToWorksheet = (worksheet, startRow) => {
    const newData = [
      ['Internal LOB 1', 'FLU 1', 'FLU LOB 1', 'email1@example.com', 'Transaction', 'Relationship 1', 'Type 1', 'Category 1', 'Product Family 1', 'Product Class 1'],
      ['Internal LOB 2', 'FLU 2', 'FLU LOB 2', 'email2@example.com', 'Transaction', 'Relationship 2', 'Type 2', 'Category 2', 'Product Family 2', 'Product Class 2'],
    ];

    // Ensure the worksheet is valid
    newData.forEach((row, rowIndex) => {
      const rowRef = worksheet.getRow(startRow + rowIndex);
      if (!rowRef) {
        console.error(`Row ${startRow + rowIndex} is undefined`);
        return;
      }

      row.forEach((cell, colIndex) => {
        rowRef.getCell(colIndex + 1).value = cell; // ExcelJS rows are 1-based index
      });
      rowRef.commit(); // Commit the row to the worksheet
    });
  };

  // Function to download the updated Excel file using FileSaver.js
  const writeExcelFile = async (workbook) => {
    const buffer = await workbook.xlsx.writeBuffer(); // Write the workbook to a buffer

    // Create a blob from the buffer
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

    // Use FileSaver.js to trigger a download
    saveAs(blob, 'updated_file.xlsx'); // This will prompt the download of the file
  };

  return (
    <div>
      <h1>Excel Data Processor (Using ExcelJS and FileSaver.js)</h1>
      <button onClick={handleFileRead}>Read and Download Excel</button>
    </div>
  );
};

export default ExcelProcessor;