import React from 'react';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';

// Define parent and child dropdown options
const parentDropdownOptions = ['Parent Option 1', 'Parent Option 2', 'Parent Option 3'];
const cascadingOptionsMap: Record<string, string[]> = {
  'Parent Option 1': ['Child 1.1', 'Child 1.2', 'Child 1.3'],
  'Parent Option 2': ['Child 2.1', 'Child 2.2', 'Child 2.3'],
  'Parent Option 3': ['Child 3.1', 'Child 3.2', 'Child 3.3'],
};

const ExcelExport: React.FC = () => {
  const handleDownloadExcel = async () => {
    const workbook = new ExcelJS.Workbook();
    
    // Create MainSheet and HiddenSheet
    const mainSheet = workbook.addWorksheet('MainSheet');
    const hiddenSheet = workbook.addWorksheet('HiddenSheet');

    // Add headers to MainSheet
    mainSheet.columns = [
      { header: 'Column 1', key: 'parent', width: 30 },
      { header: 'Column 2', key: 'child', width: 30 },
    ];

    // Add dropdown options to HiddenSheet
    parentDropdownOptions.forEach((option, idx) => {
      hiddenSheet.getCell(`A${idx + 1}`).value = option;
    });

    let rowOffset = 10;
    Object.keys(cascadingOptionsMap).forEach((parentOption, idx) => {
      cascadingOptionsMap[parentOption].forEach((childOption, childIdx) => {
        hiddenSheet.getCell(`B${rowOffset + childIdx}`).value = childOption;
      });
      rowOffset += cascadingOptionsMap[parentOption].length;
    });

    // Apply dropdowns to MainSheet
    for (let i = 2; i <= 1000; i++) {
      const parentCell = mainSheet.getCell(`A${i}`);
      const childCell = mainSheet.getCell(`B${i}`);

      // Add parent dropdown from HiddenSheet
      parentCell.dataValidation = {
        type: 'list',
        allowBlank: false,
        formula1: `HiddenSheet!$A$1:$A$${parentDropdownOptions.length}`,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Parent dropdown.',
      };

      // Add cascading dropdown to child based on parent value
      childCell.dataValidation = {
        type: 'list',
        allowBlank: false,
        formula1: `INDIRECT("B"&MATCH(A${i},HiddenSheet!A$1:A$${parentDropdownOptions.length},0)+9)`,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Child dropdown.',
      };
    }

    // Hide the HiddenSheet
    hiddenSheet.state = 'hidden';

    // Save the workbook
    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'final_cascading_dropdown_exceljs.xlsx');
  };

  return (
    <div>
      <button onClick={handleDownloadExcel}>Download Excel with ExcelJS</button>
    </div>
  );
};

export default ExcelExport;