import React from 'react';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

// Define options for each static parent dropdown
const parentDropdownOptions: string[] = ['Parent Option 1', 'Parent Option 2', 'Parent Option 3'];

// Define cascading dropdown values based on the parent selection
const cascadingOptionsMap: Record<string, string[]> = {
  'Parent Option 1': ['Child 1.1', 'Child 1.2', 'Child 1.3'],
  'Parent Option 2': ['Child 2.1', 'Child 2.2', 'Child 2.3'],
  'Parent Option 3': ['Child 3.1', 'Child 3.2', 'Child 3.3'],
};

// Helper function to convert dropdown options into named ranges in the Excel sheet
const createNamedRange = (ws: XLSX.WorkSheet, rangeName: string, options: string[], startRow: number) => {
  options.forEach((option, idx) => {
    ws[`A${startRow + idx}`] = { t: 's', v: option }; // Place dropdown options in a hidden column
  });
  ws['!ref'] = `A${startRow}:${`A${startRow + options.length - 1}`}`; // Define the named range
  return `Sheet1!A${startRow}:A${startRow + options.length - 1}`; // Return the range reference
};

const ExcelExport: React.FC = () => {
  const handleDownloadExcel = () => {
    const wb = XLSX.utils.book_new(); // Create a new workbook
    const ws = XLSX.utils.aoa_to_sheet([[]]); // Create an empty worksheet

    // Define the headers
    const headers = ['Parent Column', 'Child Column'];

    // Place the headers in the sheet
    XLSX.utils.sheet_add_aoa(ws, [headers], { origin: 'A1' });

    // Create named ranges for parent dropdown options
    const parentRange = createNamedRange(ws, 'ParentOptions', parentDropdownOptions, 10); // Start the hidden dropdown list from row 10

    // Create named ranges for cascading options
    Object.keys(cascadingOptionsMap).forEach((parentOption, idx) => {
      createNamedRange(ws, parentOption.replace(/ /g, ''), cascadingOptionsMap[parentOption], 20 + idx * 5); // Start from row 20 and increment for each cascading option group
    });

    // Apply data validation to the parent column
    const dataValidation: XLSX.DataValidation[] = [];
    for (let row = 2; row <= 100; row++) {
      const parentCellRef = XLSX.utils.encode_cell({ r: row - 1, c: 0 });
      const childCellRef = XLSX.utils.encode_cell({ r: row - 1, c: 1 });

      // Parent dropdown validation
      dataValidation.push({
        sqref: parentCellRef,
        type: 'list',
        formula1: `=${parentRange}`, // Refer to the parent options named range
        allowBlank: false,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the dropdown list.',
      });

      // Cascading dropdown validation using INDIRECT
      dataValidation.push({
        sqref: childCellRef,
        type: 'list',
        formula1: `=INDIRECT(SUBSTITUTE(${parentCellRef}, " ", ""))`, // Use INDIRECT to reference the named range dynamically
        allowBlank: false,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the cascading dropdown.',
      });
    }

    // Add data validation rules to the worksheet
    ws['!dataValidation'] = dataValidation;

    // Append the worksheet to the workbook
    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

    // Trigger file download
    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'cascading_dropdown_template.xlsx');
  };

  return (
    <div>
      <button onClick={handleDownloadExcel}>Download Excel with Cascading Dropdowns</button>
    </div>
  );
};

export default ExcelExport;