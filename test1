
import React, { useMemo } from "react";
import {
  FormHelperText,
  MenuItem,
  Select,
  Tooltip,
} from "@mui/material";
import { FixedSizeList } from "react-window";
import { useController, useFormContext } from "react-hook-form";
import { ArrowDropDownIcon } from "@mui/icons-material";
import _ from "lodash";
import CustomLabel from "./CustomLabel";

type Props = {
  control: any;
  config: {
    name: string;
    label: string;
    required?: boolean;
    options: { key: any; value: any; label: string }[];
    defaultValue?: any;
    toolTips?: string; // Tooltip for the dropdown
    helperText?: string;
    readOnly?: boolean;
  };
  onChange?: (event: React.ChangeEvent<{ value: unknown }>, value: any) => void; // Optional custom onChange
};

const CustomSelectField: React.FC<Props> = ({ control, config, onChange }) => {
  const { register, clearErrors } = useFormContext();
  const { fieldState, field } = useController({
    control,
    name: config.name,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required
        ? `${config.label} is required`
        : false,
    },
  });

  const { error } = fieldState;

  // Handle onChange event
  const handleOnChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const selectedValue = event.target.value;
    if (onChange) {
      onChange(event, selectedValue); // Trigger custom onChange if provided
    }
    field.onChange(selectedValue); // Default behavior
    clearErrors(config.name); // Clear errors
  };

  // Render selected value
  const renderValue = (selected: string) => {
    if (!selected) {
      return <span style={{ color: "#999" }}>Select</span>;
    }

    const selectedOption = config.options.find(
      (option) => option.value === selected
    );

    return selectedOption?.label || selected;
  };

  // Sort options dynamically and memoize
  const sortedOptions = useMemo(
    () => _.orderBy(config.options, ["value"], ["asc"]),
    [config.options]
  );

  const ITEM_HEIGHT = 40;
  const DROPDOWN_HEIGHT = 300;

  // Render a single row in the virtualized list
  const renderRow = ({ index, style }: { index: number; style: React.CSSProperties }) => {
    const option = sortedOptions[index];
    return (
      <MenuItem
        key={option.key}
        value={option.value}
        style={style}
      >
        {option.label}
      </MenuItem>
    );
  };

  // Inject options into Material-UI's Menu component
  const VirtualizedList = React.forwardRef((props, ref) => (
    <FixedSizeList
      ref={ref}
      height={DROPDOWN_HEIGHT}
      width="100%"
      itemSize={ITEM_HEIGHT}
      itemCount={sortedOptions.length}
      {...props}
    >
      {renderRow}
    </FixedSizeList>
  ));

  const IconComponent = (props: any) => (
    <Tooltip title={config.toolTips || ""}>
      <ArrowDropDownIcon {...props} />
    </Tooltip>
  );

  return (
    <div>
      <CustomLabel htmlFor={config.name} label={config.label} />
      <Select
        id={config.name}
        value={field.value || config.defaultValue || ""} // Default to config.defaultValue
        {...register(config.name)}
        onChange={handleOnChange} // Correctly handle onChange
        displayEmpty
        renderValue={renderValue}
        IconComponent={IconComponent}
        MenuProps={{
          PaperProps: {
            style: { maxHeight: DROPDOWN_HEIGHT, width: "auto" },
          },
          MenuListProps: {
            component: VirtualizedList, // Inject VirtualizedList into the Menu
          },
        }}
        inputProps={{
          "data-testid": "custom_select",
          "aria-controls": config.name,
          "aria-label": config.label,
        }}
      >
        <MenuItem value="" disabled>
          <span style={{ color: "#999" }}>Select</span>
        </MenuItem>
      </Select>
      {error && (
        <FormHelperText style={{ color: "#D32F2F" }}>
          {error?.message || config.helperText || ""}
        </FormHelperText>
      )}
      {!error && config.helperText && (
        <FormHelperText>{config.helperText}</FormHelperText>
      )}
    </div>
  );
};

export default CustomSelectField;