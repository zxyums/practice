Here are the common limitations shared between ExcelJS and xlsx (SheetJS) when working with Excel files in a browser or JavaScript environment:

1. No Support for Macros (VBA):

Both ExcelJS and xlsx do not support Excel macros. Macros (written in VBA) are ignored when reading files, and neither library provides functionality to create or run macros.

2. Limited Formula Support:

Both libraries allow setting and reading formulas, but they cannot calculate or evaluate the results of those formulas. Formulas are read as strings and written as-is, meaning the actual calculations need to be done within Excel.

3. No Chart Support:

ExcelJS and xlsx both lack support for handling Excel charts. If your Excel file contains charts, the libraries will ignore them when reading, and there’s no way to create or modify charts programmatically.

4. Lack of Pivot Table Support:

Neither ExcelJS nor xlsx supports pivot tables. While you can manipulate the raw data, pivot tables cannot be created, read, or modified using these libraries.

5. Limited Handling of Complex Formatting:

While both libraries offer basic formatting options (such as font styles, colors, and cell alignment), they do not fully support more complex formatting features like:

	•	Conditional formatting
	•	Gradient fills
	•	Custom number formats
	•	Cell border styles

6. Large File Performance Issues:

Both libraries are limited by JavaScript’s single-threaded nature and browser memory constraints. Working with large files (thousands of rows and columns) can result in performance degradation, high memory consumption, or even browser crashes.

7. No Built-in Support for External Links:

Hyperlinks to external documents or websites may not be fully supported. The libraries allow adding hyperlinks, but they might not be preserved correctly when reading or writing more complex Excel files with external references.

8. Limited Data Validation:

Both libraries offer basic support for data validation (like dropdown lists or simple input restrictions). However, advanced validation rules, such as custom validation formulas or complex data input restrictions, are either unsupported or difficult to implement.

9. Handling of Shared Formulas:

Shared formulas (formulas that apply across multiple cells or sheets) are not well supported. Both libraries treat each formula as an independent entity, which can result in inefficient handling of files with shared formulas.

10. No Support for Advanced Excel Features:

Features like comments, slicers, and 3D references are not supported by either library. Excel files that contain these features may lose this information when processed by ExcelJS or xlsx.

Summary:

While both ExcelJS and xlsx are powerful libraries for handling basic Excel operations in JavaScript environments, they fall short in dealing with more advanced Excel features like macros, charts, pivot tables, complex formatting, and formula calculations. Additionally, they both struggle with performance when working with large files in the browser. For full Excel functionality, you would need to rely on server-side libraries or native desktop applications like Excel itself.