import React, { useEffect } from "react";
import {
  Select,
  MenuItem,
  FormHelperText,
  InputAdornment,
} from "@mui/material";
import { useController, useFormContext } from "react-hook-form";
import * as styles from "../../shared/styles"; // Ensure this path is correct
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { FixedSizeList } from "react-window";
import { FieldConfig } from "../../types/formTypes"; // Ensure this is correct
import lodash from "lodash"; // Importing lodash for sorting

type CustomSelectFieldProps = {
  config: FieldConfig;
  onChange?: (
    event: React.ChangeEvent<{ value: unknown }>,
    value: string | number | undefined
  ) => void;
  control?: any;
};

const VirtualizedList = React.forwardRef<HTMLDivElement, any>(
  ({ children, itemHeight, width }, ref) => (
    <FixedSizeList
      ref={ref as React.RefObject<FixedSizeList<any>>}
      height={200} // Fixed height for virtualization
      itemSize={itemHeight || 35} // Default item height
      itemCount={React.Children.count(children)}
      width={width || "100%"}
    >
      {({ index, style }) => (
        <div style={style}>
          {React.Children.toArray(children)[index] as React.ReactNode}
        </div>
      )}
    </FixedSizeList>
  )
);

VirtualizedList.displayName = "VirtualizedList";

const CustomSelectField: React.FC<CustomSelectFieldProps> = ({
  config,
  onChange,
  control,
}) => {
  const { clearErrors } = useFormContext();
  const { field, fieldState } = useController({
    name: config.name,
    control,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required ? `${config.label} is required` : false,
    },
  });

  const { error } = fieldState;

  useEffect(() => {
    if (field.value) {
      clearErrors(config.name);
    }
  }, [field.value, config.name, clearErrors]);

  // Ensure options exist and are sorted by the 'value' property
  const options = lodash.orderBy(config.options || [], ["value"], ["asc"]);

  return (
    <div>
      <Select
        id={config.name}
        value={field.value || ""}
        {...field}
        onChange={(e) => {
          field.onChange(e);
          onChange?.(e, e.target.value as string | number | undefined);
        }}
        onBlur={() => {
          if (!field.value && config.required) {
            field.onBlur();
          }
        }}
        fullWidth
        displayEmpty
        error={!!error}
        disabled={config.readOnly}
        IconComponent={(props) => (
          <InputAdornment position="end">
            <ArrowDropDownIcon {...props} />
          </InputAdornment>
        )}
        MenuProps={{
          PaperProps: {
            style: { maxHeight: 200 },
          },
          MenuListProps: {
            component: VirtualizedList,
            itemHeight: 35, // Adjust height per item
            width: "100%",
          } as any, // Casting `MenuListProps` to allow virtualized list customization
        }}
        inputProps={{
          "aria-controls": config.name,
        }}
      >
        {options.length > 0 ? (
          options.map((option) => (
            <MenuItem
              key={option.key || option.value}
              value={option.key || option.value}
              style={styles.fieldEntryStyles}
            >
              {option.label || option.value}
            </MenuItem>
          ))
        ) : (
          <MenuItem value="" style={styles.fieldEntryStyles} disabled>
            No options available
          </MenuItem>
        )}
      </Select>
      <FormHelperText style={{ color: "#B71C1C" }}>
        {error?.message || config.helperText || ""}
      </FormHelperText>
    </div>
  );
};

export default CustomSelectField;