

import React, { useState } from "react";
import ClosableAlert from "./ClosableAlert";

const App: React.FC = () => {
  const [alert, setAlert] = useState<{
    open: boolean;
    severity: "error" | "warning" | "info" | "success";
    message: string;
    autoClose: boolean;
  }>({
    open: false,
    severity: "info",
    message: "",
    autoClose: false,
  });

  const fakeApiCall = async (): Promise<string> => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        Math.random() > 0.5 ? resolve("success") : reject("error");
      }, 1000);
    });
  };

  const handleApiCall = async () => {
    try {
      // Simulate an API call
      await fakeApiCall();
      setAlert({
        open: true,
        severity: "success",
        message: "API call was successful!",
        autoClose: true, // Enable auto-close
      });
    } catch (error) {
      setAlert({
        open: true,
        severity: "error",
        message: "API call failed. Please try again!",
        autoClose: true, // Enable auto-close
      });
    }
  };

  const closeAlert = () => {
    setAlert((prev) => ({ ...prev, open: false }));
  };

  return (
    <div>
      <button onClick={handleApiCall}>Make API Call</button>

      {/* Display the alert */}
      <ClosableAlert
        open={alert.open}
        severity={alert.severity}
        message={alert.message}
        onClose={closeAlert}
        autoClose={alert.autoClose}
      />
    </div>
  );
};

export default App;


import React, { useEffect } from "react";
import { Alert, IconButton } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";

interface ClosableAlertProps {
  open: boolean;
  severity?: "error" | "warning" | "info" | "success"; // TypeScript enum for severity
  message: string;
  onClose: () => void;
  autoClose?: boolean; // Optional prop to enable auto-close
  autoCloseTime?: number; // Optional time (in ms) before auto-close
}

const ClosableAlert: React.FC<ClosableAlertProps> = ({
  open,
  severity = "info",
  message,
  onClose,
  autoClose = false,
  autoCloseTime = 3000,
}) => {
  useEffect(() => {
    let timer: NodeJS.Timeout | undefined;
    if (open && autoClose) {
      timer = setTimeout(() => {
        onClose();
      }, autoCloseTime);
    }
    return () => {
      if (timer) clearTimeout(timer); // Cleanup timer on unmount or if `open` changes
    };
  }, [open, autoClose, autoCloseTime, onClose]);

  if (!open) return null;

  return (
    <Alert
      severity={severity}
      action={
        <IconButton
          aria-label="close"
          color="inherit"
          size="small"
          onClick={onClose}
        >
          <CloseIcon fontSize="inherit" />
        </IconButton>
      }
    >
      {message}
    </Alert>
  );
};

export default ClosableAlert;









