
import React, { useRef } from "react";
import {
  FormHelperText,
  InputAdornment,
  MenuItem,
  Select,
  Tooltip,
  SelectChangeEvent, // Import this type
} from "@mui/material";
import { FixedSizeList as List } from "react-window";
import { FieldConfig } from "../types/formTypes";
import CustomLabel from "./CustomLabel";
import { useController, useFormContext } from "react-hook-form";
import _ from "lodash";
import { ArrowDropDownIcon } from "@mui/icons-material";

type Props = {
  control: any;
  config: FieldConfig;
  onChange?: (
    event: SelectChangeEvent,
    value: any
  ) => void; // Updated type for onChange
};

const CustomSelectField: React.FC<Props> = ({ control, config, onChange }) => {
  const { register, clearErrors } = useFormContext();
  const { fieldState, field } = useController({
    control,
    name: config.name,
    defaultValue: config.defaultValue || null,
    rules: {
      required: config.required
        ? `${config.label} is required`
        : false,
    },
  });

  const { error } = fieldState;

  const handleOnChange = (event: SelectChangeEvent) => {
    const selectedValue = event.target.value;
    if (onChange) {
      onChange(event, selectedValue); // Custom onChange
    }
    field.onChange(selectedValue); // Default onChange
  };

  const dropdownRef = useRef(null);
  const options = _.orderBy(config.options, ["value"], ["asc"]);

  const renderRow = ({ index, style }: { index: number; style: React.CSSProperties }) => {
    const option = options[index];
    return (
      <MenuItem
        key={option.key}
        value={option.value}
        style={style}
        onClick={() => handleOnChange({ target: { value: option.value } } as any)}
      >
        {option.label}
      </MenuItem>
    );
  };

  return (
    <div className="flexing">
      <CustomLabel htmlFor={config.name} label={config.label} />
      <Select
        id={config.name}
        value={field.value || ""}
        {...register(config.name)}
        onChange={handleOnChange} // Fixed type here
        onBlur={field.onBlur}
        displayEmpty
        IconComponent={ArrowDropDownIcon}
        inputProps={{
          "data-testid": "custom_select",
          "aria-controls": config.name,
          "aria-label": config.label,
        }}
        MenuProps={{
          PaperProps: {
            style: {
              maxHeight: 300, // Dropdown height
            },
          },
        }}
        ref={dropdownRef}
      >
        <MenuItem value={undefined} disabled>
          Select
        </MenuItem>
        <List
          height={300} // Height of dropdown
          itemCount={options.length}
          itemSize={35} // Height of each option
          width="100%"
        >
          {renderRow}
        </List>
      </Select>
      {error && (
        <FormHelperText style={{ color: "#D32F2F" }}>
          {error?.message || config.helperText || ""}
        </FormHelperText>
      )}
    </div>
  );
};

export default CustomSelectField;