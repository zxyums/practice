import React, { useCallback, useState } from 'react';
import { Button, Typography, Box } from '@mui/material';
import { useDropzone } from 'react-dropzone';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

interface GroupHeaderConfig {
  groupName: string;
  headers: { name: string; position: number }[];
}

const REQUIRED_GROUP_HEADERS: { position: number; config: GroupHeaderConfig }[] = [
  { position: 1, config: { groupName: "LOB Details", headers: [
    { name: "INTERNAL USE ONLY", position: 1 },
    { name: "LOB", position: 2 },
    { name: "FLU", position: 3 },
    { name: "FLU LOB / CHANNEL", position: 4 },
    { name: "Email of Associate Completing this template", position: 5 }
  ]}},
  // Add other group headers as shown above...
];

const validateHeaders = (groupRow: string[], headerRow: string[]) => {
  for (const { position, config } of REQUIRED_GROUP_HEADERS) {
    if (groupRow[position - 1] !== config.groupName) {
      return { isValid: false, message: `Group name mismatch at position ${position}. Expected: '${config.groupName}'` };
    }
    for (const header of config.headers) {
      if (headerRow[header.position - 1] !== header.name) {
        return { isValid: false, message: `Header mismatch at position ${header.position}. Expected: '${header.name}'` };
      }
    }
  }
  return { isValid: true, message: "File headers are valid and in correct order." };
};

const FileUpload: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const token = 'YOUR_BEARER_TOKEN_HERE';

  const onDrop = useCallback(async (acceptedFiles: File[]) => {
    if (acceptedFiles.length > 1) {
      alert('Only one file is allowed. Please select a single file.');
      return;
    }

    const file = acceptedFiles[0];
    const validFileTypes = ['.xlsx', '.xlsm', '.xls'];
    const fileExtension = file.name.split('.').pop()?.toLowerCase();
    
    if (!validFileTypes.includes(`.${fileExtension}`)) {
      alert('Please upload a valid Excel file (.xlsx, .xlsm, .xls)');
      return;
    }

    const fileData = await file.arrayBuffer();
    const workbook = XLSX.read(fileData, { type: 'array' });

    if (workbook.SheetNames.length === 0) {
      alert('The file is empty. Please upload a valid Excel file with content.');
      return;
    }

    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
    const sheetData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 }) as string[][];
    const groupRow = sheetData[0];
    const headerRow = sheetData[1];

    const { isValid, message } = validateHeaders(groupRow, headerRow);
    if (!isValid) {
      alert(message);
      return;
    }

    if (sheetData.length <= 2) {
      alert('The file must contain at least one row of data.');
      return;
    }

    setSelectedFile(file);
    alert('File is valid and ready for upload.');
  }, []);

  const handleUpload = async () => {
    if (!selectedFile) {
      alert('Please select a valid file first!');
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await fetch('/api/v5/excel/upload', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: formData,
      });

      if (!response.ok) throw new Error('Failed to upload file');
      alert('File uploaded successfully!');
    } catch (error) {
      alert('Error uploading file. Please try again.');
    }
  };

  const handleDownload = async () => {
    try {
      const response = await fetch('/api/v5/excel/download', {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${token}` },
      });

      if (!response.ok) throw new Error('Failed to download file');
      const blob = await response.blob();
      const filename = response.headers.get('Content-Disposition')?.split('filename=')[1] || 'downloaded_file.xlsx';
      saveAs(blob, filename);
    } catch (error) {
      alert('Error downloading file. Please try again.');
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.ms-excel.sheet.macroEnabled.12': ['.xlsm'],
      'application/vnd.ms-excel': ['.xls']
    },
    maxFiles: 1
  });

  return (
    <div>
      <Box {...getRootProps()} sx={{ border: '2px dashed #ccc', padding: '20px', textAlign: 'center', cursor: 'pointer', backgroundColor: isDragActive ? '#e0f7fa' : '#f9f9f9', marginBottom: '16px' }}>
        <input {...getInputProps()} />
        <Typography>{isDragActive ? "Drop the file here..." : "Drag & drop an Excel file here, or click to select one"}</Typography>
      </Box>
      {selectedFile && <Typography>Selected File: {selectedFile.name}</Typography>}
      <Button variant="contained" color="secondary" onClick={handleUpload} disabled={!selectedFile}>Upload File</Button>
      <Button variant="contained" color="primary" onClick={handleDownload}>Download File</Button>
    </div>
  );
};

export default FileUpload;