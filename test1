import React from 'react';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

// Define parent dropdown options
const parentDropdownOptions = ['Parent Option 1', 'Parent Option 2', 'Parent Option 3'];

// Define cascading dropdown options based on parent selection
const cascadingOptionsMap: Record<string, string[]> = {
  'Parent Option 1': ['Child 1.1', 'Child 1.2', 'Child 1.3'],
  'Parent Option 2': ['Child 2.1', 'Child 2.2', 'Child 2.3'],
  'Parent Option 3': ['Child 3.1', 'Child 3.2', 'Child 3.3'],
};

// Helper function to add dropdown options to the hidden sheet
const addDropdownOptionsToHiddenSheet = (ws: XLSX.WorkSheet, startRow: number, options: string[], col = 'A'): string => {
  options.forEach((option, idx) => {
    const cell = `${col}${startRow + idx}`;
    ws[cell] = { t: 's', v: option };
  });
  return `$${col}$${startRow}:$${col}$${startRow + options.length - 1}`;
};

const ExcelExport: React.FC = () => {
  const handleDownloadExcel = () => {
    const wb = XLSX.utils.book_new(); // Create a new workbook

    // Main sheet setup with headers "Column 1" (Parent) and "Column 2" (Child)
    const mainSheet = XLSX.utils.aoa_to_sheet([['Column 1', 'Column 2']]);

    // Hidden sheet to store the dropdown data
    const hiddenSheet = XLSX.utils.aoa_to_sheet([[]]);

    // Add parent dropdown options to hidden sheet (Column A)
    const parentRange = addDropdownOptionsToHiddenSheet(hiddenSheet, 1, parentDropdownOptions, 'A');

    // Add cascading dropdown options (starting from row 10 in Column B)
    let rowOffset = 10;
    Object.keys(cascadingOptionsMap).forEach((parentOption) => {
      addDropdownOptionsToHiddenSheet(hiddenSheet, rowOffset, cascadingOptionsMap[parentOption], 'B');
      rowOffset += cascadingOptionsMap[parentOption].length;
    });

    // Set reference range for hidden sheet
    hiddenSheet['!ref'] = `A1:B100`;

    // Apply data validation for Parent (Column 1) and Child (Column 2) dropdowns
    const dataValidation: XLSX.DataValidation[] = [];
    for (let row = 2; row <= 1000; row++) {
      const parentCellRef = XLSX.utils.encode_cell({ r: row - 1, c: 0 });
      const childCellRef = XLSX.utils.encode_cell({ r: row - 1, c: 1 });

      // Parent dropdown validation (from hidden sheet)
      dataValidation.push({
        sqref: parentCellRef,
        type: 'list',
        formula1: `=HiddenSheet!${parentRange}`, // Refer to parent options
        allowBlank: false,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Parent dropdown.',
      });

      // Cascading dropdown validation using INDIRECT for dynamic selection
      dataValidation.push({
        sqref: childCellRef,
        type: 'list',
        formula1: `=INDIRECT("B"&MATCH(${parentCellRef},HiddenSheet!A$1:A$3,0)+10)`, // Cascading logic
        allowBlank: false,
        showErrorMessage: true,
        errorTitle: 'Invalid Input',
        error: 'Please select a valid option from the Child dropdown.',
      });
    }

    // Apply data validation rules to the main sheet
    mainSheet['!dataValidation'] = dataValidation;

    // Append main sheet and hidden sheet to workbook
    XLSX.utils.book_append_sheet(wb, mainSheet, 'MainSheet');
    XLSX.utils.book_append_sheet(wb, hiddenSheet, 'HiddenSheet');

    // Ensure the MainSheet is active and HiddenSheet is hidden
    wb.Workbook = { Sheets: [] };
    wb.Workbook.Sheets.push({ name: 'HiddenSheet', Hidden: 1 }); // Hide the hidden sheet properly
    wb.Workbook.Views = [{ activeTab: 0 }]; // Set MainSheet as active

    // Trigger the download for the user
    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'final_cascading_dropdown.xlsx');
  };

  return (
    <div>
      <button onClick={handleDownloadExcel}>Download Excel with Cascading Dropdowns</button>
    </div>
  );
};

export default ExcelExport;