import React, { useEffect } from 'react';
import * as XLSX from 'xlsx';
import * as XLSXStyle from 'xlsx-style';

const ExcelProcessor = () => {
  // Load the file when the component mounts or upon button click
  const handleFileRead = () => {
    fetch('/components/File/sample.xlsx')  // Adjust the path as per your file location
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch the Excel file');
        }
        return response.arrayBuffer();
      })
      .then((data) => {
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0]; // Assume first sheet
        const worksheet = workbook.Sheets[sheetName];

        // Write new data starting from row 3 (below headers)
        writeDataToWorksheet(worksheet, 3);

        // Write back and download the updated Excel file
        writeExcelFile(workbook);
      })
      .catch((error) => {
        console.error('Error fetching the file:', error);
      });
  };

  // Function to write new data programmatically
  const writeDataToWorksheet = (worksheet, startRow) => {
    const newData = [
      ['Internal LOB 1', 'FLU 1', 'FLU LOB 1', 'email1@example.com', 'Transaction', 'Relationship 1', 'Type 1', 'Category 1', 'Product Family 1', 'Product Class 1'],
      ['Internal LOB 2', 'FLU 2', 'FLU LOB 2', 'email2@example.com', 'Transaction', 'Relationship 2', 'Type 2', 'Category 2', 'Product Family 2', 'Product Class 2'],
      // Add more rows as needed
    ];

    newData.forEach((row, rowIndex) => {
      row.forEach((cell, colIndex) => {
        const cellRef = XLSX.utils.encode_cell({ r: startRow + rowIndex, c: colIndex }); // Address like A3, B3, etc.
        worksheet[cellRef] = { v: cell }; // Write data to the cell
      });
    });

    // Update the worksheet's range to include the new data
    worksheet['!ref'] = XLSX.utils.encode_range({
      s: { r: 0, c: 0 },
      e: { r: startRow + newData.length - 1, c: newData[0].length - 1 },
    });
  };

  // Function to download the updated Excel file
  const writeExcelFile = (workbook) => {
    const newWorkbook = XLSXStyle.write(workbook, { bookType: 'xlsx', type: 'array' });

    const blob = new Blob([newWorkbook], { type: 'application/octet-stream' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'updated_file.xlsx';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div>
      <h1>Excel Data Processor</h1>
      <button onClick={handleFileRead}>Read File from Directory and Download Updated Excel</button>
    </div>
  );
};

export default ExcelProcessor;