import React from 'react';
import { Box, Typography, Button } from '@mui/material';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

const ExcelTable: React.FC = () => {

    const handleDownloadExcel = () => {
        // Create a new workbook and main worksheet
        const workbook = XLSX.utils.book_new();
        const mainSheetData = [
            Array.from({ length: 50 }, (_, i) => `Column ${i + 1}`),  // Headers: Column 1, Column 2, ..., Column 50
            Array.from({ length: 50 }, () => "")  // Empty row for user to fill in
        ];
        const worksheet = XLSX.utils.aoa_to_sheet(mainSheetData);

        // Sample Data Validation Rules for Each Column
        const dataValidationRules = [
            {
                column: "A",  // Column 1
                list: ["Option1", "Option2", "Option3"],  // Sample Options
                ruleName: "OptionsList1",
            },
            {
                column: "B",  // Column 2
                list: ["Choice1", "Choice2", "Choice3"],
                ruleName: "OptionsList2",
            },
            // Add more rules for each of the 50 columns as needed
        ];

        // Define named ranges for each dropdown list
        dataValidationRules.forEach((rule, index) => {
            const ruleSheetName = `RuleSheet${index + 1}`;
            const ruleSheetData = rule.list.map(option => [option]);
            const ruleSheet = XLSX.utils.aoa_to_sheet(ruleSheetData);

            // Add the sheet to the workbook
            workbook.SheetNames.push(ruleSheetName);
            workbook.Sheets[ruleSheetName] = ruleSheet;

            // Define a named range for the list
            workbook.Sheets[ruleSheetName]['!ref'] = `A1:A${rule.list.length}`;

            // Set up data validation in the main sheet
            const colRange = `${rule.column}2:${rule.column}100`;
            worksheet["!dataValidation"] = worksheet["!dataValidation"] || [];
            worksheet["!dataValidation"].push({
                sqref: colRange,
                type: "list",
                formula1: `='${ruleSheetName}'!$A$1:$A$${rule.list.length}`,
                showErrorMessage: true,
                errorTitle: "Invalid Input",
                error: `Please select a valid option from the dropdown.`,
            });
        });

        // Append the main worksheet
        XLSX.utils.book_append_sheet(workbook, worksheet, 'MainSheet');

        // Generate Excel file and trigger download
        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
        saveAs(blob, 'LOB_Details_Complex.xlsx');
    };

    return (
        <Box sx={{ padding: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 'bold', textDecoration: 'underline', color: 'blue' }}>
                Download Excel with 50 Column Rules
            </Typography>
            <Box sx={{ marginTop: 3 }}>
                <Button variant="contained" color="primary" onClick={handleDownloadExcel}>
                    Download Excel
                </Button>
            </Box>
        </Box>
    );
};

export default ExcelTable;