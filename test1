import React from 'react';
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';
// Import the Excel file from the components folder
import yourExcelFile from './your-file.xlsx'; // Adjust the path according to your folder structure

const ExcelProcessor: React.FC = () => {
  const handleFileProcess = async () => {
    try {
      // Step 1: Fetch the imported file as Blob (handled by Vite's asset system)
      const response = await fetch(yourExcelFile);
      if (!response.ok) {
        throw new Error(`Error fetching the file: ${response.statusText}`);
      }
      const blob = await response.blob();

      // Step 2: Create a new workbook using ExcelJS
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.load(await blob.arrayBuffer());

console.log(workbook.worksheets.map(sheet => sheet.name));

      // Step 3: Access the sheet you want to modify by name or by index
      const sheetName = 'Sheet1'; // Replace with your sheet name
      let worksheet = workbook.getWorksheet(sheetName);

      // If the sheet doesn't exist by name, try by index (this is optional)
      if (!worksheet) {
        worksheet = workbook.getWorksheet(1); // First sheet (index starts from 1)
      }

      // Check if worksheet exists before trying to add a row
      if (!worksheet) {
        throw new Error(`Worksheet not found. Please ensure the sheet exists.`);
      }

      // Step 4: Modify the sheet (e.g., add a new row at the end)
      worksheet.addRow(['New Data 1', 'New Data 2', 'New Data 3']);

      // Step 5: Write the modified workbook to a buffer
      const modifiedBuffer = await workbook.xlsx.writeBuffer();

      // Step 6: Create a Blob from the modified buffer and save the modified file
      const newExcelBlob = new Blob([modifiedBuffer], {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      });

      // Step 7: Trigger file download using FileSaver
      saveAs(newExcelBlob, 'modified-file.xlsx');
    } catch (error) {
      console.error('Error processing file:', error);
    }
  };

  return (
    <div>
      <button onClick={handleFileProcess}>Process and Download Excel File</button>
    </div>
  );
};

export default ExcelProcessor;