import React from "react";
import { useForm } from "react-hook-form";

const MyForm = () => {
  const { register, getValues } = useForm();

  // Centralized field definitions with conditional logic
  const fields = [
    { name: "dropdown1", type: "dropdown", options: ["optionA", "optionB", "optionC"], condition: () => true },
    { name: "dropdown2", type: "dropdown", options: ["optionX", "optionY"], condition: (values) => values.dropdown1 === "optionA" },
    { name: "dropdown3", type: "dropdown", options: ["optionY", "optionZ"], condition: (values) => values.dropdown1 === "optionB" },
    { name: "field1", type: "input", placeholder: "Field 1", condition: () => true },
    { name: "field2", type: "input", placeholder: "Field 2", condition: (values) => values.dropdown2 === "optionX" },
    { name: "field3", type: "input", placeholder: "Field 3", condition: (values) => values.dropdown3 === "optionY" },
  ];

  const calculateProgress = () => {
    const values = getValues(); // Get current form values
    const activeFields = fields.filter((field) => field.condition(values)); // Only fields meeting conditions
    const filledFields = activeFields.filter((field) => values[field.name]?.trim()).length; // Count filled fields

    const totalRequired = activeFields.length;
    const progress = totalRequired ? (filledFields / totalRequired) * 100 : 100; // Avoid division by 0

    console.log(`Progress: ${progress}%`);
    return progress;
  };

  const handleSubmit = () => {
    const progress = calculateProgress();
    alert(`Form progress: ${progress}%`);
  };

  return (
    <form>
      {fields.map((field) =>
        field.condition(getValues()) ? (
          field.type === "dropdown" ? (
            <select key={field.name} {...register(field.name)} defaultValue="">
              <option value="">Select {field.name}</option>
              {field.options.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
          ) : (
            <input
              key={field.name}
              {...register(field.name)}
              placeholder={field.placeholder}
            />
          )
        ) : null
      )}
      <button type="button" onClick={handleSubmit}>
        Check Progress
      </button>
    </form>
  );
};

export default MyForm;