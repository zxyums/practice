import React, { useEffect } from "react";
import { Alert, IconButton } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";

export default function ClosableAlert({
  open,
  severity = "info",
  message,
  onClose,
  autoClose = false, // Prop to enable auto-close
  autoCloseTime = 3000, // Time (in ms) before auto-close
}) {
  useEffect(() => {
    let timer;
    if (open && autoClose) {
      timer = setTimeout(() => {
        onClose();
      }, autoCloseTime);
    }
    return () => clearTimeout(timer); // Cleanup timer on unmount or if open changes
  }, [open, autoClose, autoCloseTime, onClose]);

  if (!open) return null;

  return (
    <Alert
      severity={severity}
      action={
        <IconButton
          aria-label="close"
          color="inherit"
          size="small"
          onClick={onClose}
        >
          <CloseIcon fontSize="inherit" />
        </IconButton>
      }
    >
      {message}
    </Alert>
  );
}


import React, { useState } from "react";
import ClosableAlert from "./ClosableAlert";

export default function App() {
  const [alert, setAlert] = useState({
    open: false,
    severity: "info",
    message: "",
    autoClose: false, // Toggle auto-close
  });

  const handleApiCall = async () => {
    try {
      // Simulate an API call
      const response = await fakeApiCall();
      setAlert({
        open: true,
        severity: "success",
        message: "API call was successful!",
        autoClose: true, // Enable auto-close
      });
    } catch (error) {
      setAlert({
        open: true,
        severity: "error",
        message: "API call failed. Please try again!",
        autoClose: true, // Enable auto-close
      });
    }
  };

  const closeAlert = () => {
    setAlert((prev) => ({ ...prev, open: false }));
  };

  return (
    <div>
      <button onClick={handleApiCall}>Make API Call</button>

      {/* Display the alert */}
      <ClosableAlert
        open={alert.open}
        severity={alert.severity}
        message={alert.message}
        onClose={closeAlert}
        autoClose={alert.autoClose}
      />
    </div>
  );
}

// Simulated API call for demonstration
const fakeApiCall = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      Math.random() > 0.5 ? resolve("Success") : reject("Error");
    }, 1000);
  });
};






