import React, { useState, useMemo } from "react";
import {
  FormHelperText,
  MenuItem,
  Select,
  Tooltip,
  Popper,
  MenuList,
  ClickAwayListener,
} from "@mui/material";
import { FixedSizeList } from "react-window";
import { useController, useFormContext } from "react-hook-form";
import ArrowDropDown from "@mui/icons-material/ArrowDropDown";
import _ from "lodash";
import CustomLabel from "./CustomLabel";

type Props = {
  control: any;
  config: {
    name: string;
    label: string;
    required?: boolean;
    options: { key: any; value: any; label: string }[];
    defaultValue?: any;
    toolTips?: string; // Tooltip for the dropdown
    helperText?: string;
    readOnly?: boolean;
  };
  onChange?: (event: React.ChangeEvent<{ value: unknown }>, value: any) => void; // Optional custom onChange
};

const CustomSelectField: React.FC<Props> = ({ control, config, onChange }) => {
  const { register, clearErrors } = useFormContext();
  const { fieldState, field } = useController({
    control,
    name: config.name,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required
        ? `${config.label} is required`
        : false,
    },
  });

  const { error } = fieldState;

  // Local state to manage dropdown open/close
  const [open, setOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);

  const handleToggle = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
    setOpen((prevOpen) => !prevOpen);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleOnChange = (value: any) => {
    if (onChange) {
      onChange({ target: { value } } as React.ChangeEvent<{ value: unknown }>, value);
    }
    field.onChange(value); // Default behavior
    clearErrors(config.name); // Clear errors
    setOpen(false); // Close dropdown after selection
  };

  const renderValue = (selected: string) => {
    if (!selected) {
      return <span style={{ color: "#999" }}>Select</span>;
    }

    const selectedOption = config.options.find(
      (option) => option.value === selected
    );

    return selectedOption?.label || selected;
  };

  // Memoize sorted options for performance
  const sortedOptions = useMemo(
    () => _.orderBy(config.options, ["value"], ["asc"]),
    [config.options]
  );

  const ITEM_HEIGHT = 40;
  const DROPDOWN_HEIGHT = 300;

  // Render a single row in the virtualized list
  const renderRow = ({ index, style }: { index: number; style: React.CSSProperties }) => {
    const option = sortedOptions[index];
    return (
      <MenuItem
        key={option.key}
        value={option.value}
        style={style}
        onClick={() => handleOnChange(option.value)}
      >
        {option.label}
      </MenuItem>
    );
  };

  const VirtualizedList = React.forwardRef<HTMLDivElement, any>((props, ref) => (
    <FixedSizeList
      height={DROPDOWN_HEIGHT}
      width="100%"
      itemSize={ITEM_HEIGHT}
      itemCount={sortedOptions.length}
      outerRef={ref} // Correct ref handling for react-window
      {...props}
    >
      {renderRow}
    </FixedSizeList>
  ));

  const IconComponent = (props: any) => (
    <Tooltip title={config.toolTips || ""}>
      <ArrowDropDown {...props} />
    </Tooltip>
  );

  return (
    <div>
      <CustomLabel htmlFor={config.name} label={config.label} />
      <div>
        <Select
          id={config.name}
          value={field.value || config.defaultValue || ""}
          {...register(config.name)}
          onClick={handleToggle}
          displayEmpty
          renderValue={renderValue}
          IconComponent={IconComponent}
          inputProps={{
            "data-testid": "custom_select",
            "aria-controls": config.name,
            "aria-label": config.label,
          }}
        />
        <Popper open={open} anchorEl={anchorEl} placement="bottom-start" style={{ zIndex: 1300 }}>
          <ClickAwayListener onClickAway={handleClose}>
            <MenuList autoFocusItem={open}>
              <VirtualizedList />
            </MenuList>
          </ClickAwayListener>
        </Popper>
      </div>
      {error && (
        <FormHelperText style={{ color: "#D32F2F" }}>
          {error?.message || config.helperText || ""}
        </FormHelperText>
      )}
      {!error && config.helperText && (
        <FormHelperText>{config.helperText}</FormHelperText>
      )}
    </div>
  );
};

export default CustomSelectField;