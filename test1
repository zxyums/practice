
import React, { useState } from "react";
import { Box, Step, StepButton, Stepper, Typography } from "@mui/material";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";
import _ from "lodash";

const ProgressBar = ({ sections }) => {
  // Initialize state with Lodash
  const [sectionStatus, setSectionStatus] = useState(
    _.keyBy(
      sections.map((section) => ({
        id: section.id,
        visited: false,
        validation: undefined,
      })),
      "id"
    )
  );

  // Utility: Update specific section state
  const updateSectionStatus = (id, updates) => {
    setSectionStatus((prev) => ({
      ...prev,
      [id]: {
        ...prev[id],
        ...updates, // Update visited or validation
      },
    }));
  };

  // Handle section click
  const handleSectionClick = (id) => {
    updateSectionStatus(id, { visited: true }); // Mark as visited
    document.getElementById(id)?.scrollIntoView({ behavior: "smooth" });
  };

  // Render icons based on validation state
  const renderIcon = (validation) => {
    if (validation === true)
      return <CheckCircleIcon fontSize="small" sx={{ color: "blue", ml: 1 }} />;
    if (validation === false)
      return (
        <WarningAmberIcon fontSize="small" sx={{ color: "orange", ml: 1 }} />
      );
    return null;
  };

  return (
    <Box sx={{ width: "100%", mb: 4 }}>
      {/* Progress Bar */}
      <Stepper nonLinear activeStep={-1} alternativeLabel>
        {sections.map((section) => {
          const { visited, validation } = sectionStatus[section.id];

          // Determine the color logic
          const color =
            validation === true
              ? "blue"
              : validation === false
              ? "orange"
              : visited
              ? "blue"
              : "gray";

          return (
            <Step key={section.id}>
              <StepButton
                onClick={() => handleSectionClick(section.id)}
                sx={{
                  "& .MuiStepLabel-root": { color }, // Update the color dynamically
                }}
              >
                {section.label}
                {renderIcon(validation)}
              </StepButton>
            </Step>
          );
        })}
      </Stepper>

      {/* Content Sections */}
      <Box sx={{ mt: 4 }}>
        {sections.map((section) => (
          <div
            key={section.id}
            id={section.id}
            style={{
              marginBottom: "100px",
              padding: "20px",
              border: "1px solid lightgray",
            }}
          >
            <Typography variant="h6">{section.label}</Typography>
            <Typography>
              Content for {section.label}. Replace this with your actual content.
            </Typography>

            {/* Example: Update validation */}
            <button
              onClick={() =>
                updateSectionStatus(section.id, { validation: true })
              }
            >
              Mark Complete
            </button>
            <button
              onClick={() =>
                updateSectionStatus(section.id, { validation: false })
              }
            >
              Mark Warning
            </button>
          </div>
        ))}
      </Box>
    </Box>
  );
};

export default ProgressBar;