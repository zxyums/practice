
import React, { useEffect, useMemo } from "react";
import {
  FormHelperText,
  MenuItem,
  Select,
  Tooltip,
  InputAdornment,
  SelectChangeEvent,
} from "@mui/material";
import { FixedSizeList } from "react-window";
import { useController, useFormContext } from "react-hook-form";
import lodash from "lodash";
import Info from "@mui/icons-material/Info";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import CustomLabel from "./CustomLabel";
import styles from "../shared/styles";

type FieldConfig = {
  name: string;
  label: string;
  required?: boolean;
  defaultValue?: any;
  options: { key: any; value: any; label: string }[];
  toolTips?: string;
  helperText?: string;
  readOnly?: boolean;
  onChange?: (event: SelectChangeEvent<string>, value: string) => void;
};

type Props = {
  control: any;
  config: FieldConfig;
};

const CustomSelectField: React.FC<Props> = ({ control, config }) => {
  const { register, clearErrors } = useFormContext();
  const { fieldState, field } = useController({
    control,
    name: config.name,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required
        ? `${config.label} is required`
        : false,
    },
  });

  const { error } = fieldState;

  useEffect(() => {
    if (field.value) {
      clearErrors(config.name);
    }
  }, [field.value, clearErrors, config.name]);

  const handleOnChange = (event: SelectChangeEvent<string>) => {
    const selectedValue = event.target.value;
    if (config.onChange) {
      config.onChange(event, selectedValue); // Call custom onChange if provided
    }
    field.onChange(selectedValue); // Default behavior
  };

  const renderValue = (selected: string) => {
    if (!selected) {
      return <em style={styles.fieldEntryStyles}>Select</em>;
    }

    const selectedOption = config.options?.find(
      (option) => option.value === selected
    );
    return selectedOption?.label || selected;
  };

  const sortedOptions = useMemo(
    () => lodash.orderBy(config.options || [], ["value"], ["asc"]),
    [config.options]
  );

  const ITEM_HEIGHT = 40;
  const DROPDOWN_HEIGHT = 300;

  const renderRow = ({ index, style }: { index: number; style: React.CSSProperties }) => {
    const option = sortedOptions[index];
    return (
      <MenuItem
        key={option?.key}
        value={option?.value}
        style={style}
        onClick={() => handleOnChange({ target: { value: option?.value } } as SelectChangeEvent<string>)}
      >
        {option?.label}
      </MenuItem>
    );
  };

  const VirtualizedList = React.forwardRef<HTMLDivElement, any>((props, ref) => (
    <FixedSizeList
      ref={ref}
      height={DROPDOWN_HEIGHT}
      width="100%"
      itemSize={ITEM_HEIGHT}
      itemCount={sortedOptions.length}
      {...props}
    >
      {renderRow}
    </FixedSizeList>
  ));

  const IconComponent = (props: any) => (
    <Tooltip title={config.toolTips || ""}>
      <ArrowDropDownIcon {...props} />
    </Tooltip>
  );

  return (
    <div className="flexing">
      <CustomLabel htmlFor={config.name} label={config.label} />
      <Select
        id={config.name}
        value={field.value || ""}
        {...register(config.name)}
        onChange={handleOnChange}
        displayEmpty
        renderValue={renderValue}
        IconComponent={IconComponent}
        inputProps={{
          "data-testid": "custom_select",
          "aria-controls": config.name,
          "aria-label": config.label,
        }}
        MenuProps={{
          PaperProps: {
            style: { maxHeight: DROPDOWN_HEIGHT },
          },
          MenuListProps: {
            component: VirtualizedList, // Inject virtualized list
          },
        }}
        disabled={config.readOnly}
        error={!!error}
      >
        <MenuItem value="" disabled>
          <em style={styles.fieldEntryStyles}>Select</em>
        </MenuItem>
        {/* Render other options if virtualization is disabled */}
        {sortedOptions?.map((option) => (
          <MenuItem key={option?.key} value={option?.value}>
            {option?.label}
          </MenuItem>
        ))}
      </Select>
      <FormHelperText style={{ color: "#B71C1C" }}>
        {error?.message || config.helperText || ""}
      </FormHelperText>
    </div>
  );
};

export default CustomSelectField;