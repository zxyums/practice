import React, { useState, forwardRef } from "react";
import {
  MenuItem,
  Select,
  FormHelperText,
  InputAdornment,
  Tooltip,
} from "@mui/material";
import { FixedSizeList } from "react-window";
import lodash from "lodash";
import { useController, useFormContext } from "react-hook-form";
import CustomLabel from "./CustomLabel";
import { FieldConfig } from "../../types/formTypes";
import * as styles from "../../shared/styles";

const DROPDOWN_HEIGHT = 300;

const VirtualizedList = forwardRef((props, ref) => (
  <FixedSizeList
    height={DROPDOWN_HEIGHT}
    itemSize={35}
    itemCount={props.children.length}
    width="100%"
    ref={ref}
  >
    {({ index, style }) => <div style={style}>{props.children[index]}</div>}
  </FixedSizeList>
));

type CustomSelectFieldProps = {
  control: any;
  config: FieldConfig;
  onChange?: (value: string) => void; // Optional onChange support
};

const CustomSelectField: React.FC<CustomSelectFieldProps> = ({
  control,
  config,
  onChange,
}) => {
  const { register, clearErrors } = useFormContext();
  const { field, fieldState } = useController({
    control,
    name: config.name,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required
        ? `${config.label} is required`
        : false,
    },
  });
  const { error } = fieldState;
  const [menuOpen, setMenuOpen] = useState(false);

  const handleOnChange = (value: string) => {
    field.onChange(value);
    if (onChange) {
      onChange(value); // Trigger optional onChange callback
    }
    if (value) {
      clearErrors(config.name); // Clear error on valid selection
    }
  };

  const renderValue = (selected: string) => {
    if (!selected) return <em style={styles.fieldEntryStyles}>Select</em>;
    const selectedLabel = config.options?.find(
      (option) => option.key === selected || option.value === selected
    )?.label;
    return selectedLabel || selected;
  };

  const getValidValue = () =>
    field.value || (config.defaultValue ? config.defaultValue : "");

  return (
    <div>
      <CustomLabel htmlFor={config.name} label={config.label} />
      <Select
        id={config.name}
        value={getValidValue()} // Ensure a valid value is displayed
        {...register(config.name)}
        open={menuOpen}
        onOpen={() => setMenuOpen(true)}
        onClose={() => setMenuOpen(false)}
        onChange={(event) => {
          const selectedValue = event.target.value;
          handleOnChange(selectedValue);
        }}
        displayEmpty
        renderValue={renderValue}
        IconComponent={(props) => (
          <Tooltip title={config.toolTips || ""} placement="top">
            <InputAdornment position="end" {...props} />
          </Tooltip>
        )}
        inputProps={{
          "data-testid": "custom_select",
          "aria-controls": config.name,
          "aria-label": config.label,
        }}
        MenuProps={
          config.options.length > 10
            ? {
                PaperProps: {
                  style: { maxHeight: DROPDOWN_HEIGHT },
                },
                MenuListProps: {
                  component: VirtualizedList,
                },
              }
            : {}
        }
        disabled={config.readOnly}
        error={!!error}
        onBlur={() => {
          if (!field.value && config.required) {
            field.onBlur();
          }
        }}
      >
        {config.options.length <= 10 ? (
          <MenuItem
            value=""
            style={styles.fieldEntryStyles}
            disabled
          >
            Select
          </MenuItem>
        ) : null}
        {lodash
          .orderBy(config.options, ["value"], ["asc"])
          .map((option) => (
            <MenuItem
              key={option.key || option.value}
              value={option.key || option.value}
              style={styles.fieldEntryStyles}
              onClick={() => setMenuOpen(false)} // Ensure menu closes on selection
            >
              {option.label || option.value}
            </MenuItem>
          ))}
      </Select>
      <FormHelperText style={{ color: "#B71C1C" }}>
        {error?.message || config.helperText || ""}
      </FormHelperText>
    </div>
  );
};

export default CustomSelectField;