import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { TextField, MenuItem, Button, Box, Typography } from "@mui/material";

export default function OptimizedFormWithVariable() {
  const form = useForm(); // Assigning useForm to a variable
  const { register, handleSubmit, watch, formState } = form;

  // State to store the percentage
  const [percentageFilled, setPercentageFilled] = useState(0);

  // Watch fields that impact conditional logic
  const hasJob = watch("hasJob");
  const isStudent = watch("isStudent");

  // Base required fields
  const baseRequiredFields = ["name", "email", "age", "gender", "address"];

  // Conditional fields mapping
  const conditionalFields = {
    hasJob: { condition: hasJob === "yes", fields: ["company", "position"] },
    isStudent: { condition: isStudent === "yes", fields: ["university"] },
  };

  /**
   * Function to determine active required fields
   */
  const getActiveRequiredFields = () => {
    let activeFields = [...baseRequiredFields];
    Object.values(conditionalFields).forEach(({ condition, fields }) => {
      if (condition) {
        activeFields = [...activeFields, ...fields];
      }
    });
    return activeFields;
  };

  /**
   * Function to calculate the percentage of filled fields
   */
  const calculateFilledPercentage = (activeFields) => {
    const filledFields = activeFields.filter(
      (field) => watch(field)?.trim() !== ""
    ).length;
    return Math.round((filledFields / activeFields.length) * 100);
  };

  // Update percentage when watched fields change
  useEffect(() => {
    const activeFields = getActiveRequiredFields();
    setPercentageFilled(calculateFilledPercentage(activeFields));
  }, [hasJob, isStudent, watch("name"), watch("email"), watch("age"), watch("gender"), watch("address"), watch("company"), watch("position"), watch("university")]);

  const onSubmit = (data) => {
    console.log("Form Submitted: ", data);
  };

  return (
    <Box sx={{ maxWidth: 500, margin: "0 auto", padding: 2 }}>
      <Typography variant="h6" gutterBottom>
        Optimized Form with Variable for useForm
      </Typography>

      <form onSubmit={handleSubmit(onSubmit)}>
        {/* Base Required Fields */}
        <TextField
          {...register("name", { required: true })}
          label="Name"
          variant="outlined"
          fullWidth
          margin="normal"
          error={!!formState.errors.name}
          helperText={formState.errors.name && "Name is required"}
        />

        <TextField
          {...register("email", { required: true })}
          label="Email"
          variant="outlined"
          fullWidth
          margin="normal"
          error={!!formState.errors.email}
          helperText={formState.errors.email && "Email is required"}
        />

        <TextField
          {...register("age", { required: true })}
          label="Age"
          variant="outlined"
          fullWidth
          margin="normal"
          error={!!formState.errors.age}
          helperText={formState.errors.age && "Age is required"}
        />

        <TextField
          {...register("gender", { required: true })}
          select
          label="Gender"
          variant="outlined"
          fullWidth
          margin="normal"
          error={!!formState.errors.gender}
          helperText={formState.errors.gender && "Gender is required"}
        >
          <MenuItem value="male">Male</MenuItem>
          <MenuItem value="female">Female</MenuItem>
          <MenuItem value="other">Other</MenuItem>
        </TextField>

        <TextField
          {...register("address", { required: true })}
          label="Address"
          variant="outlined"
          fullWidth
          margin="normal"
          error={!!formState.errors.address}
          helperText={formState.errors.address && "Address is required"}
        />

        {/* Conditional Field: hasJob */}
        <TextField
          {...register("hasJob")}
          select
          label="Do you have a job?"
          variant="outlined"
          fullWidth
          margin="normal"
        >
          <MenuItem value="yes">Yes</MenuItem>
          <MenuItem value="no">No</MenuItem>
        </TextField>

        {hasJob === "yes" && (
          <>
            <TextField
              {...register("company", { required: true })}
              label="Company"
              variant="outlined"
              fullWidth
              margin="normal"
              error={!!formState.errors.company}
              helperText={formState.errors.company && "Company is required"}
            />
            <TextField
              {...register("position", { required: true })}
              label="Position"
              variant="outlined"
              fullWidth
              margin="normal"
              error={!!formState.errors.position}
              helperText={formState.errors.position && "Position is required"}
            />
          </>
        )}

        {/* Conditional Field: isStudent */}
        <TextField
          {...register("isStudent")}
          select
          label="Are you a student?"
          variant="outlined"
          fullWidth
          margin="normal"
        >
          <MenuItem value="yes">Yes</MenuItem>
          <MenuItem value="no">No</MenuItem>
        </TextField>

        {isStudent === "yes" && (
          <TextField
            {...register("university", { required: true })}
            label="University"
            variant="outlined"
            fullWidth
            margin="normal"
            error={!!formState.errors.university}
            helperText={formState.errors.university && "University is required"}
          />
        )}

        {/* Display percentage */}
        <Typography variant="body1" sx={{ marginTop: 2 }}>
          Filled Percentage of Required Fields: <strong>{percentageFilled}%</strong>
        </Typography>

        <Button
          type="submit"
          variant="contained"
          color="primary"
          fullWidth
          sx={{ marginTop: 3 }}
        >
          Submit
        </Button>
      </form>
    </Box>
  );
}