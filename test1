import React, { useEffect } from "react";
import {
  Select,
  MenuItem,
  FormHelperText,
  InputAdornment,
} from "@mui/material";
import { useController, useFormContext } from "react-hook-form";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import lodash from "lodash";

type CustomSelectFieldProps = {
  config: FieldConfig;
  onChange?: (
    event: SelectChangeEvent<string | number | undefined>,
    value: string | number | undefined
  ) => void;
  control?: any;
};

const CustomSelectField: React.FC<CustomSelectFieldProps> = ({
  config,
  onChange,
  control,
}) => {
  const { clearErrors } = useFormContext();
  const { field, fieldState } = useController({
    name: config.name,
    control,
    defaultValue: config.defaultValue || "",
    rules: {
      required: config.required ? `${config.label} is required` : false,
    },
  });

  const { error } = fieldState;

  useEffect(() => {
    if (field.value) {
      clearErrors(config.name);
    }
  }, [field.value, config.name, clearErrors]);

  // Sort and prepare options
  const options = lodash.orderBy(config.options || [], ["value"], ["asc"]);

  return (
    <div>
      <Select
        id={config.name}
        value={field.value || ""} // Ensure value is explicitly defined
        onChange={(event) => {
          field.onChange(event); // React Hook Form's handler
          onChange?.(event, event.target.value); // External handler if provided
        }}
        onBlur={field.onBlur}
        fullWidth
        displayEmpty
        error={!!error}
        disabled={config.readOnly}
        IconComponent={(props) => (
          <InputAdornment position="end">
            <ArrowDropDownIcon {...props} />
          </InputAdornment>
        )}
        inputProps={{
          "aria-controls": config.name,
        }}
      >
        {options.length > 0 ? (
          options.map((option) => (
            <MenuItem key={option.key || option.value} value={option.value}>
              {option.label || option.value}
            </MenuItem>
          ))
        ) : (
          <MenuItem value="" disabled>
            No options available
          </MenuItem>
        )}
      </Select>
      <FormHelperText style={{ color: "#B71C1C" }}>
        {error?.message || config.helperText || ""}
      </FormHelperText>
    </div>
  );
};

export default CustomSelectField;