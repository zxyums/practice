import React from 'react';
import ExcelJS from 'exceljs';
import excelFile from './features/fluassessment/3Q2024_Template_Without_Macros.xlsx'; // Correct path

const ExcelProcessor = () => {
  // Function to handle reading, modifying, and downloading the Excel file
  const handleFileRead = () => {
    fetch(excelFile) // Fetch the imported file as a URL
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to load the Excel file');
        }
        return response.arrayBuffer();
      })
      .then(async (data) => {
        // Create a new workbook and load the file content
        const workbook = new ExcelJS.Workbook();
        await workbook.xlsx.load(data); // Load the Excel data

        // Assume we are working with the first sheet
        const worksheet = workbook.getWorksheet(1);

        // Write new data starting from row 3 (below headers)
        writeDataToWorksheet(worksheet, 3);

        // Write the modified workbook to a blob and trigger download
        writeExcelFile(workbook);
      })
      .catch((error) => {
        console.error('Error loading the file:', error);
      });
  };

  // Function to write new data programmatically
  const writeDataToWorksheet = (worksheet, startRow) => {
    const newData = [
      ['Internal LOB 1', 'FLU 1', 'FLU LOB 1', 'email1@example.com', 'Transaction', 'Relationship 1', 'Type 1', 'Category 1', 'Product Family 1', 'Product Class 1'],
      ['Internal LOB 2', 'FLU 2', 'FLU LOB 2', 'email2@example.com', 'Transaction', 'Relationship 2', 'Type 2', 'Category 2', 'Product Family 2', 'Product Class 2'],
    ];

    newData.forEach((row, rowIndex) => {
      const rowRef = worksheet.getRow(startRow + rowIndex);
      row.forEach((cell, colIndex) => {
        rowRef.getCell(colIndex + 1).value = cell; // ExcelJS rows are 1-based index
      });
      rowRef.commit(); // Commit the row to the worksheet
    });
  };

  // Function to download the updated Excel file
  const writeExcelFile = async (workbook) => {
    const buffer = await workbook.xlsx.writeBuffer(); // Write the workbook to a buffer

    // Create a blob from the buffer and trigger download
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'updated_file.xlsx';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div>
      <h1>Excel Data Processor (Using ExcelJS)</h1>
      <button onClick={handleFileRead}>Read and Download Excel</button>
    </div>
  );
};

export default ExcelProcessor;